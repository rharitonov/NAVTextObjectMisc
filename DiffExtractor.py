import hashlib

#dest : source

#tables
renum_map = {'50003' : '51009'
    , '50005' : '51010'
    , '50009' : '51011'
    , '50010' : '51012'
    , '50011' : '51013'
    , '50012' : '51014'
    , '50017' : '51015'
    , '50018' : '51016'
    , '50019' : '51017'
    , '50020' : '51018'
    , '50021' : '51019'
    , '50023' : '51020'
    , '50027' : '51021'
    , '50028' : '51036'
    , '50029' : '51038'
    , '50036' : '51096'
    , '50037' : '51097'
    , '50038' : '51100'
    , '50041' : '51101'
    , '50043' : '51102'
    , '50045' : '51103'
    , '50047' : '51104'
    , '50048' : '51105'
    , '50065' : '51106'
    , '50072' : '51107'
    , '50073' : '51300'
    , '50093' : '51301'
    , '50095' : '51302'
    , '50105' : '51303'
    , '50109' : '51304'
    , '50110' : '51305'
    , '50119' : '51306'
    , '50121' : '51307'
    , '50122' : '51308'
    , '50130' : '51309'
    , '50131' : '51310'
    , '50133' : '51311'
    , '50154' : '51312'
    , '50155' : '51313'
    , '50156' : '51314'
    , '50158' : '51315'
    , '50164' : '51316'
    , '50170' : '51317'
    , '50171' : '51318'
    , '50172' : '51319'
    , '50173' : '51320'
    , '50178' : '51321'
    , '50179' : '51322'
    , '50180' : '51323'
    , '50188' : '51324'
    , '50189' : '51325'
    , '50216' : '51326'
    , '50221' : '51327'
    , '50227' : '51328'
    , '50228' : '51329'
    , '50272' : '51331'
    , '50273' : '51332'
    , '50274' : '51333'
    , '50299' : '51334'
    , '50314' : '51335'
    , '50318' : '51336'
    , '50319' : '51337'
    , '50323' : '51338'
    , '50324' : '51350'
    , '50325' : '51351'
    , '50326' : '51352'
    , '50327' : '51353'
    , '50328' : '51361'
    , '50329' : '51399'
    , '50332' : '51500'
    , '50333' : '51501'
    , '50334' : '51502'
    , '50337' : '51503'
    , '50338' : '51504'
    , '50339' : '51505'
    , '50340' : '51506'
    , '50341' : '51507'
    , '50342' : '51508'
    , '50343' : '51509'
    , '50344' : '51510'
    , '50355' : '51511'
    , '50356' : '51512'
    , '50357' : '51513'
    , '50358' : '51514'
    , '50359' : '51515'
    , '50360' : '51516'
    , '50361' : '51561'
    , '50362' : '51623'
    , '50363' : '53620'
    , '50364' : '53621'
    , '50365' : '53622'
    , '50369' : '53623'
    , '50401' : '53650'
    , '50402' : '53651'
    , '50403' : '53652'
    , '50404' : '53653'
    , '50406' : '53654'
    , '50407' : '53655'
    , '50408' : '53656'
    , '50409' : '53660'
    , '50418' : '53665'
    , '50419' : '53669'
    , '50421' : '53670'
    , '50422' : '53671'
    , '50423' : '53672'
    , '50424' : '53673'
    , '50438' : '53674'
    , '50441' : '53675'
    , '50442' : '53676'
    , '50443' : '53680'
    , '50444' : '53685'
    , '50445' : '53686'
    , '50446' : '53690'
    , '50447' : '53691'
    , '50448' : '53700'
    , '50449' : '53801'
    , '50457' : '53802'
    , '50458' : '53803'
    , '50459' : '53804'
    , '50460' : '53805'
    , '50461' : '53999'
    , '50462' : '54000'
    , '50463' : '54001'
    , '50464' : '54002'
    , '50465' : '54500'
    , '50466' : '56031'
    , '50467' : '56032'
    , '50468' : '56033'
    , '50469' : '57001'
    , '50470' : '57002'
    , '50471' : '57003'
    , '50472' : '57006'
    , '50473' : '57500'
    , '50474' : '57501'
    , '50475' : '58000'
    , '50476' : '59005'
    , '50477' : '59006'
    , '50478' : '59007'
    , '50479' : '59020'
    , '50480' : '59021'
    , '50481' : '59022'
    , '50482' : '59023'
    , '50483' : '59025'
    , '50484' : '59125'
    , '50485' : '60001'
    , '50486' : '60002'
    , '50487' : '60003'
    , '50488' : '60007'
    , '50489' : '60024'
    , '50490' : '60100'
    , '50491' : '60101'
    , '50492' : '60102'
    , '50493' : '60301'
    , '50494' : '61002'
    , '50495' : '61003'
    , '50496' : '61004'
    , '50497' : '61019'
    , '50498' : '61023'
    , '50501' : '61080'
    , '50502' : '61137'
    , '50503' : '61287'
    , '50504' : '61340'
    , '50507' : '61349'
    , '50508' : '61404'
    , '50509' : '61701'
    , '50512' : '61702'
    , '50513' : '61703'
    , '50514' : '61704'
    , '50515' : '61705'
    , '50516' : '61706'
    , '50517' : '61707'
    , '50518' : '61708'
    , '50519' : '61710'
    , '50520' : '61711'
    , '50521' : '61712'
    , '50522' : '61713'
    , '50523' : '61714'
    , '50524' : '61715'
    , '50525' : '61716'
    , '50526' : '61717'
    , '50527' : '61718'
    , '50528' : '62000'
    , '50529' : '62001'
    , '50530' : '62002'
    , '50531' : '62003'
    , '50532' : '62004'
    , '50533' : '62006'
    , '50535' : '62008'
    , '50536' : '62500'
    , '50537' : '63000'
    , '50538' : '63001'
    , '50539' : '63070'
    , '50540' : '63071'
    , '50541' : '63078'
    , '50542' : '63085'
    , '50543' : '63100'
    , '50544' : '63501'
    , '50545' : '63802'
    , '50546' : '65430'
    , '50547' : '65811'
    , '50548' : '71000'
    , '50549' : '71001'
    , '50558' : '71002'
    , '50561' : '71003'
    , '50568' : '76000'
    , '50570' : '76010'
    , '50571' : '76016'
    , '50572' : '76017'
    , '50573' : '77038'
    , '50574' : '77039'
    , '50575' : '77191'
    , '50576' : '77364'
    , '50577' : '77365'
    , '50578' : '77777'
    , '50579' : '77805'
    , '50580' : '77980'
    , '50581' : '80000'
    , '50582' : '80007'
    , '50583' : '80008'
    , '50584' : '81000'
    , '50585' : '81001'
    , '50586' : '81002'
    , '50587' : '81003'
    , '50588' : '81004'
    , '50589' : '81005'
    , '50590' : '81006'
    , '50591' : '81013'
    , '50592' : '81014'
    , '50593' : '81018'
    , '50594' : '81019'
    , '50595' : '81020'
    , '50596' : '81021'
    , '50597' : '81022'
    , '50598' : '81023'
    , '50599' : '88881'
    , '50600' : '88882'
    , '50601' : '88883'
    , '50602' : '88884'
    , '50603' : '88885'
    , '50604' : '88886'
    , '50605' : '90004'
    , '50606' : '90005'
    , '50607' : '90006'
    , '50608' : '90007'
    , '50609' : '90008'
    , '50610' : '90100'
    , '50611' : '91000'
    , '50612' : '91001'
    , '50613' : '91005'
    , '50614' : '91008'
    , '50615' : '91013'
    , '50616' : '91015'
    , '50617' : '91016'
    , '50618' : '91019'
    , '50619' : '91021'
    , '50620' : '91022'
    , '50621' : '91023'
    , '50622' : '91024'
    , '50623' : '91025'
    , '50624' : '91067'
    , '50625' : '91068'
    , '50626' : '91069'
    , '50627' : '91070'
    , '50628' : '91071'
    , '50629' : '92300'
    , '50630' : '92301'
    , '50631' : '92302'
    , '50632' : '92320'
    , '50633' : '92321'
    , '50634' : '92322'
    , '50635' : '92323'
    , '50636' : '92324'
    , '50637' : '92325'
    , '50638' : '92326'
    , '50639' : '93101'
    , '50640' : '93102'
    , '50641' : '93103'
    , '50642' : '93104'
    , '50643' : '93105'
    , '50644' : '93106'
    , '50645' : '93107'
    , '50646' : '93108'
    , '50647' : '93109'
    , '50648' : '93110'
    , '50649' : '93120'
    , '50650' : '93121'
    , '50651' : '93140'
    , '50652' : '93141'
    , '50653' : '93145'
    , '50654' : '93146'
    , '50655' : '93150'
    , '50656' : '93160'
    , '50657' : '93161'
    , '50658' : '93162'
    , '50659' : '93163'
    , '50660' : '93164'
    , '50661' : '97088'
    , '50662' : '99291'
    , '50663' : '99292'
    , '50664' : '99925'
    , '50665' : '99987'
    , '50666' : '99989'
    , '50667' : '99990'
    , '50668' : '99991'
    , '50669' : '99992'
    , '50670' : '99999'}

obj_checksum = {}
obj_code = ''
obj_id = ''
obj_to_extract = []

def get_checksum(text: str) -> str:
    h = hashlib.sha1()
    h.update(text.encode())
    return h.hexdigest()

def get_object_id(obj_definition: str) -> str:
    words = obj_definition.split(' ', 3)
    return words[2]
    
def add_to_extracting_objects(renamed_obj_id: str, renamed_obj_code: str) -> None:
    if not renamed_obj_id:
        return
    orig_obj_id = renum_map.get(renamed_obj_id) 
    if not orig_obj_id:
        orig_obj_id = renamed_obj_id
    if obj_checksum[orig_obj_id] != get_checksum(renamed_obj_code):
        obj_to_extract.append(renamed_obj_id)
   
print('Reading orig objects..')
with open('c:/temp/objects_orig.txt', 'r', encoding='cp866') as fi:
    for line in fi:
        if not line.startswith('OBJECT '):
            obj_code += line
        else:
            obj_checksum[obj_id] = get_checksum(obj_code)
            obj_id = get_object_id(line)
            obj_code = line 
    obj_checksum[obj_id] = get_checksum(obj_code)   

print('Reading renamed objects..')
obj_code = ''
obj_id = ''
with open('c:/temp/objects_renamed.txt', 'r', encoding='cp866') as fi:
    for line in fi:
        if not line.startswith('OBJECT '):
            obj_code += line
        else:
            add_to_extracting_objects(obj_id, obj_code)
            obj_id = get_object_id(line)                
            obj_code = line 
    add_to_extracting_objects(obj_id, obj_code)            

print('Extracting objects..')
total = 0
exported = 0
with open('c:/temp/objects_out.txt', 'w', encoding='cp866') as fo:
    with open('c:/temp/objects_renamed.txt', 'r', encoding='cp866') as fi:
        for line in fi:
            if line.startswith('OBJECT '):
                total += 1
                obj_id = get_object_id(line)                
                if obj_id in obj_to_extract:
                    write_line = True
                    exported += 1
                else:
                    write_line = False
            if write_line:
                fo.write(line)

print(f'Exported {exported} of {total}')








